<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasyADO.NET</name>
    </assembly>
    <members>
        <member name="T:EasyADO.NET.EasyAdoNet">
            <summary>
                Library, which will make work with ADO.NET and Microsoft SQL Server much easier.
            </summary>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.#ctor(System.String)">
            <param name="connectionString">Connection string to the Microsoft SQL Server database.</param>
            <exception cref="T:System.ArgumentException">Throws, when given connection string is empty or incorrect.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when given connection string is null.</exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.ExecProcedure(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Executes given stored procedure with given parameters.
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <param name="parameters">Parameters for stored procedure. First element - name of the parameter,
                second element - value.
            </param>
            <returns>A<see cref="T:System.Data.SqlClient.SqlDataReader"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Throws, when
                <paramref name="parameters"/>
                is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when one of the parameters is null.</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="procedureName"/>
                or one of the
                <paramref name="parameters"/>
                doesn't exist in the database.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.ExecProcedure(System.String)">
            <summary>
                Executes given stored procedure.
            </summary>
            <param name="procedureName">Name of the stored procedure.</param>
            <returns>A<see cref="T:System.Data.SqlClient.SqlDataReader"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Throws, when
                <paramref name="procedureName"/>
                is null.
            </exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="procedureName"/>
                doesn't exist in the database.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.ExecView(System.String)">
            <summary>
                Executes given view and returns all the data from the result.
            </summary>
            <param name="viewName">Name of the view.</param>
            <returns>A<see cref="T:System.Data.SqlClient.SqlDataReader"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Throws, when
                <paramref name="viewName"/>
                is null.
            </exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="viewName"/>
                doesn't exist in the database.'
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.Find(System.String,System.String[])">
            <summary>
                Retrieves all the data from a given table, selecting only given columns.
            </summary>
            <param name="tableName">Name of the table, from which will be retrieving the data.</param>
            <param name="columns">Names of the columns.</param>
            <returns>A<see cref="T:System.Data.SqlClient.SqlDataReader"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Throws, when given
                <paramref name="tableName"/>
                doesn't exist in the database or
                <paramref name="columns"/>
                are empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when
                <paramref name="tableName"/>
                or
                <paramref name="columns"/>
                are null.
            </exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="columns"/>
                have non-existing column.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.Find``1(System.String,System.String[])">
            <summary>
                Retrieves all the data from a given table, selecting only given columns.
            </summary>
            <param name="tableName">Name of the table, from which will be retrieving the data.</param>
            <param name="columns">Names of the columns.</param>
            <typeparam name="T">Type of the class, to which will be converted result of query.</typeparam>
            <returns>Collection of
                <typeparamref name="T"/>
                instances.
            </returns>
            <exception cref="T:System.ArgumentException">Throws, when given
                <paramref name="tableName"/>
                doesn't exist in the database or
                <paramref name="columns"/>
                are empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when
                <paramref name="tableName"/>
                or
                <paramref name="columns"/>
                are null.
            </exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="columns"/>
                have non-existing column.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.Find(System.String,System.String,System.String[])">
            <summary>
                Retrieves all the data from a given table by predicate, selecting only given columns.
            </summary>
            <param name="tableName">Name of the table, from which will be retrieving the data.</param>
            <param name="predicate">Part of SQL query, which starts with 'WHERE' statement, e.g. 'WHERE ColumnName =
                Value AND AnotherColumnName = AnotherValue'.
            </param>
            <param name="columns">Names of the columns.</param>
            <returns>A<see cref="T:System.Data.SqlClient.SqlDataReader"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Throws, when given
                <paramref name="tableName"/>
                doesn't exist in the database or
                <paramref name="predicate"/>
                or
                <paramref name="columns"/>
                are empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when one of the parameters is null.</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="columns"/>
                have non-existing column or
                <paramref name="predicate"/>
                has incorrect SQL syntax.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.Find``1(System.String,System.String,System.String[])">
            <summary>
                Retrieves all the data from a given table by predicate, selecting only given columns.
            </summary>
            <param name="tableName">Name of the table, from which will be retrieving the data.</param>
            <param name="predicate">Part of SQL query, which starts with 'WHERE' statement, e.g. 'WHERE ColumnName =
                Value AND AnotherColumnName = AnotherValue'.
            </param>
            <param name="columns">Names of the columns.</param>
            <typeparam name="T">Type of the class, to which will be converted result of query.</typeparam>
            <returns>Collection of
                <typeparamref name="T"/>
                instances.
            </returns>
            <exception cref="T:System.ArgumentException">Throws, when given
                <paramref name="tableName"/>
                doesn't exist in the database or
                <paramref name="predicate"/>
                or
                <paramref name="columns"/>
                are empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when one of the parameters is null.</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="columns"/>
                have non-existing column or
                <paramref name="predicate"/>
                has incorrect SQL syntax.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.Find(System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Retrieves all the data from a given table by conditions, selecting only given columns.
            </summary>
            <param name="tableName">Name of the table, from which will be retrieving the data.</param>
            <param name="columns">Names of the columns.</param>
            <param name="equalityConditions">Conditions, by which will be searching. First component - name of the
                column,
                second element - value of the column.
            </param>
            <returns>A<see cref="T:System.Data.SqlClient.SqlDataReader"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Throws, when given
                <paramref name="tableName"/>
                doesn't exist in the database or
                <paramref name="equalityConditions"/>
                or
                <paramref name="columns"/>
                are empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when one of the parameters is null.</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="columns"/>
                or
                <paramref name="equalityConditions"/>
                have non-existing column.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.Find``1(System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Retrieves all the data from a given table by conditions, selecting only given columns.
            </summary>
            <param name="tableName">Name of the table, from which will be retrieving the data.</param>
            <param name="columns">Names of the columns.</param>
            <param name="equalityConditions">Conditions, by which will be searching. First component - name of the
                column,
                second element - value of the column.
            </param>
            <typeparam name="T">Type of the class, to which will be converted result of query.</typeparam>
            <returns>Collection of
                <typeparamref name="T"/>
                instances.
            </returns>
            <exception cref="T:System.ArgumentException">Throws, when given
                <paramref name="tableName"/>
                doesn't exist in the database or
                <paramref name="equalityConditions"/>
                or
                <paramref name="columns"/>
                are empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when one of the parameters is null.</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="columns"/>
                or
                <paramref name="equalityConditions"/>
                have non-existing column.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.FindAll(System.String)">
            <summary>
                Retrieves all the data from a given table name.
            </summary>
            <param name="tableName">Name of the table, from which will be retrieving the data.</param>
            <returns>A<see cref="T:System.Data.SqlClient.SqlDataReader"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Throws, when
                <paramref name="tableName"/>
                doesn't exist in the database.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when
                <paramref name="tableName"/>
                is null.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.FindAll``1(System.String)">
            <summary>
                Retrieves all the data from a given table name.
            </summary>
            <param name="tableName">Name of the table, from which will be retrieving the data.</param>
            <typeparam name="T">Type of the class, to which will be converted result of query.</typeparam>
            <returns>Collection of
                <typeparamref name="T"/>
                instances.
            </returns>
            <exception cref="T:System.ArgumentException">Throws, when
                <paramref name="tableName"/>
                doesn't exist in the database.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when
                <paramref name="tableName"/>
                is null.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.FindAll(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Retrieves all the data from a given table name by conditions.
            </summary>
            <param name="tableName">Name of the table, from which will be retrieving the data.</param>
            <param name="equalityConditions">Conditions, by which will be searching. First component - name of the
                column,
                second component - searching value of the column.
            </param>
            <returns>A<see cref="T:System.Data.SqlClient.SqlDataReader"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Throws, when
                <paramref name="tableName"/>
                doesn't exist in the database.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when
                <paramref name="tableName"/>
                or
                <paramref name="equalityConditions"/>
                are null.
            </exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="equalityConditions"/>
                have non-existing column.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.FindAll``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Retrieves all the data from a given table name by conditions.
            </summary>
            <param name="tableName">Name of the table, from which will be retrieving the data.</param>
            <param name="equalityConditions">Conditions, by which will be searching. First component - name of the
                column,
                second component - searching value of the column.
            </param>
            <typeparam name="T">Type of the class, to which will be converted result of query.</typeparam>
            <returns>Collection of
                <typeparamref name="T"/>
                instances.
            </returns>
            <exception cref="T:System.ArgumentException">Throws, when
                <paramref name="tableName"/>
                doesn't exist in the database.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when
                <paramref name="tableName"/>
                or
                <paramref name="equalityConditions"/>
                are null.
            </exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="equalityConditions"/>
                have non-existing column.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.FindAll(System.String,System.String)">
            <summary>
                Retrieves all the data from a given table name by predicate.
            </summary>
            <param name="tableName">Name of the table, from which will be retrieving the data.</param>
            <param name="predicate">Part of SQL query, which starts with 'WHERE' statement, e.g. 'WHERE ColumnName =
                Value AND AnotherColumnName = AnotherValue'.
            </param>
            <returns>A<see cref="T:System.Data.SqlClient.SqlDataReader"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Throws, when
                <paramref name="tableName"/>
                doesn't exist in the database or
                <paramref name="predicate"/>
                is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when
                <paramref name="tableName"/>
                or
                <paramref name="predicate"/>
                is null.
            </exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="predicate"/>
                has incorrect SQL syntax.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.FindAll``1(System.String,System.String)">
            <summary>
                Retrieves all the data from a given table name by predicate.
            </summary>
            <param name="tableName">Name of the table, from which will be retrieving the data.</param>
            <param name="predicate">Part of SQL query, which starts with 'WHERE' statement, e.g. 'WHERE ColumnName =
                Value AND AnotherColumnName = AnotherValue'.
            </param>
            <typeparam name="T">Type of the class, to which will be converted result of query.</typeparam>
            <returns>Collection of
                <typeparamref name="T"/>
                instances.
            </returns>
            <exception cref="T:System.ArgumentException">Throws, when
                <paramref name="tableName"/>
                doesn't exist in the database or
                <paramref name="predicate"/>
                is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when
                <paramref name="tableName"/>
                or
                <paramref name="predicate"/>
                is null.
            </exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="predicate"/>
                has incorrect SQL syntax.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.Insert(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Inserts given values to the given table. 
            </summary>
            <param name="tableName">Name of the table, in which will be inserting the data.</param>
            <param name="values">Values, which will be inserting to the table. First component of the values - name of
                the column,
                second component - inserting value of the column.
            </param>
            <returns>Inserted ID.</returns>
            <exception cref="T:System.ArgumentException">Throws, when given
                <paramref name="tableName"/>
                doesn't exist in the database or
                <paramref name="values"/>
                are empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when one of the parameters is null.</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="values"/>
                has not existing column.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.Update(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Updates given values in the given table by the predicate.
            </summary>
            <param name="tableName">Name of the table, in which will be updating.</param>
            <param name="predicate">Part of the SQL query, which starts with 'WHERE' statement, e.g. 'WHERE ColumnName =
                Value AND AnotherColumnName = AnotherValue'.
            </param>
            <param name="updatingValues">Values, which will be replaced in the table. First component - name of the
                column, second component - value.
            </param>
            <exception cref="T:System.ArgumentException">Throws, when given
                <paramref name="tableName"/>
                doesn't exist in the database or
                <paramref name="predicate"/>
                or
                <paramref name="updatingValues"/>
                are empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when one of the parameters is null.</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="predicate"/>
                or
                <paramref name="updatingValues"/>
                have non-existing column.
            </exception>
        </member>
        <member name="M:EasyADO.NET.EasyAdoNet.Update(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                Updates given values in the given table by given conditions.
            </summary>
            <param name="tableName">Name of the table, in which will be updating.</param>
            <param name="equalityConditions">Conditions, by which will be comparing in 'WHERE' section. First component
                - name of the column,
                second element - value of the column.
            </param>
            <param name="updatingValues">Values, which will be replaced in the table. First component - name of the
                column, second component - value.
            </param>
            <exception cref="T:System.ArgumentException">Throws, when given
                <paramref name="tableName"/>
                doesn't exist in the database or
                <paramref name="equalityConditions"/>
                or
                <paramref name="updatingValues"/>
                are empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws, when one of the parameters is null.</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">Throws, when
                <paramref name="equalityConditions"/>
                or
                <paramref name="updatingValues"/>
                have non-existing column.
            </exception>
        </member>
    </members>
</doc>
